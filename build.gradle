buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

version = "${minecraft_version}-${mod_version}"
group = "${group_path}"
archivesBaseName = "${filename_base}"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    
    mappings = "${mappings_version}"

    replace "@VERSION@", project.version
    replaceIn "Reference.java"

    if(project.hasProperty("keyStoreFingerprint")) {

        replace "@FINGERPRINT@", project.keyStoreFingerprint
        replaceIn "Reference.java"
    }
}

repositories {
    maven {
        url  "http://chickenbones.net/maven/"
    }
    maven {
        url  "http://maven.covers1624.net/"
    }
    maven {
        url  "http://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    deobfCompile "cofh:CoFHCore:${minecraft_version}-${cofh_version}:deobf"
    //deobfCompile "appeng:appliedenergistics2:rv4-${ae2_version}:dev"
    runtime "codechicken:CodeChickenLib:${minecraft_version}-${chickenlib_version}:deobf"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'minecraft_version':project.minecraft.version
    }

    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signUniversal(type: SignJar, dependsOn: 'jar') {
    onlyIf {
        project.hasProperty('keyStore')
    }

    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    keyStore = project.keyStore
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signUniversal